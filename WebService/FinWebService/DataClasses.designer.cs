#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LibyanGovGuideWSApp
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="LibyanGovGuideDB")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertT_Procedure(T_Procedure instance);
    partial void UpdateT_Procedure(T_Procedure instance);
    partial void DeleteT_Procedure(T_Procedure instance);
    partial void InsertT_ProcedureDetail(T_ProcedureDetail instance);
    partial void UpdateT_ProcedureDetail(T_ProcedureDetail instance);
    partial void DeleteT_ProcedureDetail(T_ProcedureDetail instance);
    partial void InsertT_Classifcation(T_Classifcation instance);
    partial void UpdateT_Classifcation(T_Classifcation instance);
    partial void DeleteT_Classifcation(T_Classifcation instance);
    #endregion
		
		public DataClassesDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["LibyanGovGuideDBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<T_Procedure> T_Procedures
		{
			get
			{
				return this.GetTable<T_Procedure>();
			}
		}
		
		public System.Data.Linq.Table<T_ProcedureDetail> T_ProcedureDetails
		{
			get
			{
				return this.GetTable<T_ProcedureDetail>();
			}
		}
		
		public System.Data.Linq.Table<T_Classifcation> T_Classifcations
		{
			get
			{
				return this.GetTable<T_Classifcation>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.T_Procedure")]
	public partial class T_Procedure : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ProcedureID;
		
		private string _ProcedureName;
		
		private System.DateTime _LastUpdate;
		
		private byte _Classification;
		
		private bool _ActivityStatus;
		
		private string _Note;
		
		private EntitySet<T_ProcedureDetail> _T_ProcedureDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProcedureIDChanging(short value);
    partial void OnProcedureIDChanged();
    partial void OnProcedureNameChanging(string value);
    partial void OnProcedureNameChanged();
    partial void OnLastUpdateChanging(System.DateTime value);
    partial void OnLastUpdateChanged();
    partial void OnClassificationChanging(byte value);
    partial void OnClassificationChanged();
    partial void OnActivityStatusChanging(bool value);
    partial void OnActivityStatusChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public T_Procedure()
		{
			this._T_ProcedureDetails = new EntitySet<T_ProcedureDetail>(new Action<T_ProcedureDetail>(this.attach_T_ProcedureDetails), new Action<T_ProcedureDetail>(this.detach_T_ProcedureDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProcedureID", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short ProcedureID
		{
			get
			{
				return this._ProcedureID;
			}
			set
			{
				if ((this._ProcedureID != value))
				{
					this.OnProcedureIDChanging(value);
					this.SendPropertyChanging();
					this._ProcedureID = value;
					this.SendPropertyChanged("ProcedureID");
					this.OnProcedureIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProcedureName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ProcedureName
		{
			get
			{
				return this._ProcedureName;
			}
			set
			{
				if ((this._ProcedureName != value))
				{
					this.OnProcedureNameChanging(value);
					this.SendPropertyChanging();
					this._ProcedureName = value;
					this.SendPropertyChanged("ProcedureName");
					this.OnProcedureNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdate", DbType="Date NOT NULL")]
		public System.DateTime LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Classification", DbType="TinyInt NOT NULL")]
		public byte Classification
		{
			get
			{
				return this._Classification;
			}
			set
			{
				if ((this._Classification != value))
				{
					this.OnClassificationChanging(value);
					this.SendPropertyChanging();
					this._Classification = value;
					this.SendPropertyChanged("Classification");
					this.OnClassificationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActivityStatus", DbType="Bit NOT NULL")]
		public bool ActivityStatus
		{
			get
			{
				return this._ActivityStatus;
			}
			set
			{
				if ((this._ActivityStatus != value))
				{
					this.OnActivityStatusChanging(value);
					this.SendPropertyChanging();
					this._ActivityStatus = value;
					this.SendPropertyChanged("ActivityStatus");
					this.OnActivityStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(MAX)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="T_Procedure_T_ProcedureDetail", Storage="_T_ProcedureDetails", ThisKey="ProcedureID", OtherKey="ProcedureID")]
		public EntitySet<T_ProcedureDetail> T_ProcedureDetails
		{
			get
			{
				return this._T_ProcedureDetails;
			}
			set
			{
				this._T_ProcedureDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_T_ProcedureDetails(T_ProcedureDetail entity)
		{
			this.SendPropertyChanging();
			entity.T_Procedure = this;
		}
		
		private void detach_T_ProcedureDetails(T_ProcedureDetail entity)
		{
			this.SendPropertyChanging();
			entity.T_Procedure = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.T_ProcedureDetail")]
	public partial class T_ProcedureDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _DetailID;
		
		private string _Title;
		
		private short _ProcedureID;
		
		private EntityRef<T_Procedure> _T_Procedure;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDetailIDChanging(short value);
    partial void OnDetailIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnProcedureIDChanging(short value);
    partial void OnProcedureIDChanged();
    #endregion
		
		public T_ProcedureDetail()
		{
			this._T_Procedure = default(EntityRef<T_Procedure>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DetailID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short DetailID
		{
			get
			{
				return this._DetailID;
			}
			set
			{
				if ((this._DetailID != value))
				{
					this.OnDetailIDChanging(value);
					this.SendPropertyChanging();
					this._DetailID = value;
					this.SendPropertyChanged("DetailID");
					this.OnDetailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProcedureID", DbType="SmallInt NOT NULL")]
		public short ProcedureID
		{
			get
			{
				return this._ProcedureID;
			}
			set
			{
				if ((this._ProcedureID != value))
				{
					if (this._T_Procedure.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProcedureIDChanging(value);
					this.SendPropertyChanging();
					this._ProcedureID = value;
					this.SendPropertyChanged("ProcedureID");
					this.OnProcedureIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="T_Procedure_T_ProcedureDetail", Storage="_T_Procedure", ThisKey="ProcedureID", OtherKey="ProcedureID", IsForeignKey=true)]
		public T_Procedure T_Procedure
		{
			get
			{
				return this._T_Procedure.Entity;
			}
			set
			{
				T_Procedure previousValue = this._T_Procedure.Entity;
				if (((previousValue != value) 
							|| (this._T_Procedure.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._T_Procedure.Entity = null;
						previousValue.T_ProcedureDetails.Remove(this);
					}
					this._T_Procedure.Entity = value;
					if ((value != null))
					{
						value.T_ProcedureDetails.Add(this);
						this._ProcedureID = value.ProcedureID;
					}
					else
					{
						this._ProcedureID = default(short);
					}
					this.SendPropertyChanged("T_Procedure");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.T_Classifcation")]
	public partial class T_Classifcation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ClassifcationID;
		
		private string _ClassificationName;
		
		private bool _ActivityStatus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClassifcationIDChanging(short value);
    partial void OnClassifcationIDChanged();
    partial void OnClassificationNameChanging(string value);
    partial void OnClassificationNameChanged();
    partial void OnActivityStatusChanging(bool value);
    partial void OnActivityStatusChanged();
    #endregion
		
		public T_Classifcation()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassifcationID", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short ClassifcationID
		{
			get
			{
				return this._ClassifcationID;
			}
			set
			{
				if ((this._ClassifcationID != value))
				{
					this.OnClassifcationIDChanging(value);
					this.SendPropertyChanging();
					this._ClassifcationID = value;
					this.SendPropertyChanged("ClassifcationID");
					this.OnClassifcationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassificationName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ClassificationName
		{
			get
			{
				return this._ClassificationName;
			}
			set
			{
				if ((this._ClassificationName != value))
				{
					this.OnClassificationNameChanging(value);
					this.SendPropertyChanging();
					this._ClassificationName = value;
					this.SendPropertyChanged("ClassificationName");
					this.OnClassificationNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActivityStatus", DbType="Bit NOT NULL")]
		public bool ActivityStatus
		{
			get
			{
				return this._ActivityStatus;
			}
			set
			{
				if ((this._ActivityStatus != value))
				{
					this.OnActivityStatusChanging(value);
					this.SendPropertyChanging();
					this._ActivityStatus = value;
					this.SendPropertyChanged("ActivityStatus");
					this.OnActivityStatusChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
